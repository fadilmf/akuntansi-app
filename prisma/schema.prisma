// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  password      String?
  role          UserRole  @default(USER)
  accounts      Account[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Product {
  id                Int                 @id @default(autoincrement())
  name              String
  category          String?
  unit              String?
  stock             Int?
  status            String?
  salesList         SaleProduct[]
  quoteProduct      QuoteProduct[]
  salesOrderProduct SalesOrderProduct[]
}

model Sale {
  id               Int           @id @default(autoincrement())
  invoiceNumber    String
  salesOrderNumber String        @map("sales_order_number")
  deliveryNumber   String
  poNumber         String
  date             DateTime
  customer         String
  termOfPayment    String
  subject          String
  notes            String?
  amount           Int?
  bill             Int?
  status           String?
  products         SaleProduct[]

  salesOrder SalesOrder @relation(fields: [salesOrderNumber], references: [salesOrderNumber], onDelete: Restrict)
}

model SaleProduct {
  id          Int     @id @default(autoincrement())
  salesId     Int
  productId   Int
  description String?
  quantity    Int
  unit        String?
  price       Int
  total       Int

  sale    Sale    @relation(fields: [salesId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@unique([salesId, productId])
}

model PriceQuote {
  id                Int            @id @default(autoincrement())
  customer          String
  quoteNumber       String
  date              DateTime
  customerReference String?
  termOfPayment     String
  // validUntil        DateTime
  // status            String
  subject           String
  notes             String?
  amount            Int?
  // createdAt         DateTime       @default(now())
  // updatedAt         DateTime       @updatedAt
  products          QuoteProduct[]
}

model QuoteProduct {
  id          Int     @id @default(autoincrement())
  quoteId     Int
  productId   Int
  description String?
  quantity    Int
  unit        String?
  price       Int
  total       Int

  quote   PriceQuote @relation(fields: [quoteId], references: [id])
  product Product    @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([quoteId, productId])
}

model SalesOrder {
  id               Int                 @id @default(autoincrement())
  salesOrderNumber String              @unique
  date             DateTime
  deliveryNumber   String
  customer         String
  poNumber         String
  termOfPayment    String
  invoiceReceived  String
  subject          String
  notes            String?
  status           String?
  amount           Int?
  products         SalesOrderProduct[]
  sale             Sale[]
}

model SalesOrderProduct {
  id           Int     @id @default(autoincrement())
  salesOrderId Int
  productId    Int
  description  String?
  quantity     Int
  unit         String?
  price        Int
  total        Int

  salesOrder SalesOrder @relation(fields: [salesOrderId], references: [id], onDelete: Cascade)
  product    Product    @relation(fields: [productId], references: [id])

  @@unique([salesOrderId, productId])
}
